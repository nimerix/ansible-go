---
- name: Create download directory
  tempfile:
    state: directory
    suffix: golang_dl
  register: go_temp_download_dir
  changed_when: false

- name: Download the Go archive
  get_url:
    url: "{{ go_download_url }}"
    dest: "{{go_temp_download_dir}}/{{ go_download_filename }}"
    checksum: "{{ go_download_checksum }}"

- name: Register the current Go version (if any)
  command: "{{ go_install_path }}/{{ go_install_dirname }}/bin/go version"
  ignore_errors: yes
  register: go_version
  changed_when: false

- name: Remove old installation of Go
  file:
    path: "{{ go_install_path }}/{{ go_install_dirname }}"
    state: absent
  when: go_version is failed or go_version.stdout != go_version_output_string

- name: Extract the Go tarball if Go is not yet installed or not the desired version
  unarchive:
    src: "{{ go_temp_download_dir}}/{{ go_download_filename}}"
    dest: "{{ go_temp_download_dir}}"
    copy: no
  when: go_version is failed or go_version.stdout != go_version_output_string

- name: Move the go install data to the correct location
  command: mv "{{ go_temp_download_dir}}/go" "{{ go_install_path }}/{{ go_install_dirname }}"
  when: go_version is failed or go_version.stdout != go_version_output_string

- name: Add the Go bin directory to the PATH environment variable for all users
  template:
    src: go-bin.sh.j2
    dest: /etc/profile.d

- name: Set GOPATH for all users
  template:
    src: go-path.sh
    dest: /etc/profile.d
  when: set_go_path

- name: Create GOPATH for specified users
  file:
    path: "/home/{{ item[0] }}/{{gopath_dirname}}/{{ item[1] }}"
    state: directory
    mode: 0755
    owner: "{{ item[0] }}"
    group: "{{ item[0] }}"
  with_nested:
    - "{{ go_users }}"
    - [ 'src', 'pkg', 'bin' ]
